import { Extension, HttpMethod, InjectionToken, MetadataPerMod3, RouteHandler } from '@ditsmod/core';
import { Tree } from './tree.js';

/**
 * A group of extensions that setting routes for router.
 */
export const PRE_ROUTER_EXTENSIONS = new InjectionToken<Extension<void>[]>('PRE_ROUTER_EXTENSIONS');
/**
 * A group of extensions that returns `MetadataPerMod3[]` for a router.
 */
export const ROUTES_EXTENSIONS = new InjectionToken<Extension<MetadataPerMod3>[]>('ROUTES_EXTENSIONS');

export interface ObjectAny {
  [k: string]: any;
}

/**
 * This metadata is generated by PreRouterExtension as internal type that need only for it.
 */
export interface PreparedRouteMeta {
  moduleName: string;
  httpMethod: HttpMethod;
  path: string;
  handle: RouteHandler;
  countOfGuards: number;
}

export type Fn = (...args: any[]) => any;

export type MethodTree = { [P in HttpMethod]?: Tree };

export type Args<T> = T extends (...args: infer A) => any ? A : never;

export enum RouteType {
  static = 0,
  root = 1,
  param = 2,
  catchAll = 3,
}

export class TreeConfig {
  path?: string = '';
  wildChild?: boolean = false;
  type?: number = RouteType.static;
  indices?: string = '';
  children?: any[] = [];
  handle?: Fn | null = null;
  priority?: number = 0;
}

export interface RouteParam {
  key: string;
  value: string;
}
