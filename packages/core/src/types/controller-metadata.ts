import type { Class, DecoratorAndValue } from '#di';
import type { AnyObj, DecoratorMetadata, HttpMethod, ServiceProvider } from './mix.js';
import type { RouteMeta } from './route-data.js';

export interface ControllerMetadata1 {
  controller: Class;
  /**
   * An array of objects with metadata generated by one or more controllers decorators.
   * Each element of the array contains a reference to the decorator factory and value that
   * passing via this decorator.
   * 
   * A reference to a specific decorator can be used to identify the decorator. For example,
   * if there was a single `@controller()` decorator above a class controller, then the array
   * will have a single element with a reference to the `controller` decorator.
   * 
   * You can compare the reference with the decorator:
   * 
   * ```ts
   * import { controller } from '@ditsmod/core';
   * // ...
   * item.decoratorFactory === controller;
   * ```
   */
  decoratorsAndValues: DecoratorAndValue[];
  properties: {
    [propertyKey: string | symbol]: DecoratorMetadata<AnyObj>[];
  };
}

export interface ControllerMetadata2 {
  /**
   * Providers per a route.
   */
  providersPerRou: ServiceProvider[];
  /**
   * Providers per a request.
   */
  providersPerReq: ServiceProvider[];
  path: string;
  httpMethod: HttpMethod;
  routeMeta: RouteMeta;
  isSingleton?: boolean;
}
